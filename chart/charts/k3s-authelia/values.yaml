global:
  # Common labels to apply to all resources.
  commonLabels: {}
  # Common annotations to apply to all resources.
  commonAnnotations: {}

enabled: true
enableExternalSecrets: true

# Ingress settings for the Authelia application.
externalCert:
  enabled: false
  secretName: ""
  secretStore: kubernetes
  secretStoreType: ClusterSecretStore

# The secret authelia uses to store sensitive information.
# if disabled the user has to provide the secrets in the authelia configmap.
externalSecrets:
  enabled: true

  secretStore: kubernetes
  secretStoreType: ClusterSecretStore

  authelia:
    secretName: AutheliaSecrets
    properties:
      # Authelia secrets
      jwt: ""
      oidcHmac: ""
      oidcIssuer: ""
      session: ""
      storage: ""
      storageEncryption: ""
      # reset: ""

      # Optional if redis is used.
      redis: ""
      redisSentinel: ""

  smtp:
    secretName: SmtpSecrets
    properties:
      smtpPassword: ""

  ldap:
    secretName: AutheliaSecrets
    properties:
      ldapPassword: ""

# Helm values file for Authelia chart.
# https://github.com/authelia/chartrepo/blob/master/charts/authelia/values.yaml
authelia:
  enabled: true
  annotations: {}
  labels: {}

  # The name override for this deployment.
  nameOverride: 'authelia'

  # The app name override for this deployment.
  appNameOverride: 'authelia'

  ingress:
    enabled: false
    tls:
      enabled: false
      secret: 'authelia-tls'
    traefikCRD:
      enabled: true 
      entryPoints:
        - websecure
      middlewares:
        chains:
          auth:
            # IMPORTANT: As we will implement the auth middlewares chain in other chains
            # using traefik (so all chains are managed in one place) the before and after lists
            # should only be used to make input and output compatible with the other middlewares chains.
            # NOT to add extra middlewares.
            # Overrides the Chain Middleware (auth) name.
            nameOverride: ''

            # List of Middlewares to apply before the forwardAuth Middleware in the authentication chain.
            before: []
            # before:
            # - name: 'extra-middleware-name'
            #   namespace: 'default'

            # List of Middlewares to apply after the forwardAuth Middleware in the authentication chain.
            after: []
            # after:
            # - name: 'extra-middleware-name'
            #   namespace: 'default'

          ingressRoute:
            # IMPORTANT: As we will implement the auth middlewares chain in other chains
            # using traefik (so all chains are managed in one place) the before and after lists
            # should only be used to make input and output compatible with the other middlewares chains.
            # NOT to add extra middlewares.
            # List of Middlewares to apply before the middleware in the IngressRoute chain.
            before: []
            # before:
            # - name: 'extra-middleware-name'
            #   namespace: 'default'

            # List of Middlewares to apply after the middleware in the IngressRoute chain.
            after: []
            # after:
            # - name: 'extra-middleware-name'
            #   namespace: 'default'
      tls:
        options:
          # Require Strict SNI requirement.
          sniStrict: false

          # Override the default Cipher Suites.
          cipherSuites: []

          # Override the default Curve Preferences.
          curvePreferences: []

  pod:
    # Extra annotations for the Pod spec.
    annotations: {}

    # Extra labels for the Pod spec.
    labels: {}

    # The number of replicas if relevant.
    replicas: 1

    # The priority class name for the Pod spec.
    priorityClassName: ''

    # List of tolerations.
    tolerations: []

    # List of additional environment variables for the Pod.
    env: []

    selectors:
      # Specific node name selector.
      nodeName: ''

      # Node selector.
      nodeSelector: {}
      # nodeSelector:
      #   disktype: 'ssd'
      #   kubernetes.io/hostname: 'worker-1'

      affinity:
        # Node affinity selector.
        nodeAffinity: {}
        # nodeAffinity:
        #   requiredDuringSchedulingIgnoredDuringExecution:
        #     nodeSelectorTerms:
        #     - matchExpressions:
        #       - key: 'kubernetes.io/hostname'
        #         operator: 'In'
        #         values:
        #         - 'worker-1'
        #         - 'worker-2'
        #   preferredDuringSchedulingIgnoredDuringExecution:
        #   - weight: 1
        #     preference:
        #       matchExpressions:
        #       - key: 'node-label-key'
        #         operator: 'NotIn'
        #         values:
        #         - 'not-this'

        # Pod affinity selector.
        podAffinity: {}
        # podAffinity:
        #   requiredDuringSchedulingIgnoredDuringExecution:
        #   - labelSelector:
        #       matchExpressions:
        #       - key: 'security'
        #         operator: 'In'
        #         values:
        #         - S1
        #     topologyKey: 'topology.kubernetes.io/zone'

        # Pod anti-affinity selector.
        podAntiAffinity: {}
        # podAntiAffinity:
        #     preferredDuringSchedulingIgnoredDuringExecution:
        #     - weight: 100
        #       podAffinityTerm:
        #         labelSelector:
        #           matchExpressions:
        #           - key: 'security'
        #             operator: 'In'
        #             values:
        #             - S2
        #         topologyKey: 'topology.kubernetes.io/zone'
    resources:
      # Resource Limits.
      limits: {}
      # limits:
      #   cpu: '4.00'
      #   memory: '125Mi'

      # Resource Requests.
      requests: {}
      # requests:
      #   cpu: '0.25'
      #   memory: '50Mi'

  podDisruptionBudget:
    # Enable the PodDisruptionBudget.
    enabled: false

    # Extra annotations for the PodDisruptionBudget manifest.
    annotations: {}

    # Extra labels for the PodDisruptionBudget manifest.
    labels: {}

    # Minimum available value for the PodDisruptionBudget manifest.
    minAvailable: 0

    # Maximum available value for the PodDisruptionBudget manifest.
    maxUnavailable: 0

  networkPolicy:
    # Enable the NetworkPolicy.
    enabled: false

    # Extra annotations for the NetworkPolicy manifest.
    annotations: {}

    # Extra labels for the NetworkPolicy manifest.
    labels: {}

    # The Policy Types such as Ingress or Egress.
    policyTypes:
      - 'Ingress'

    # https://charts.authelia.com/definitions.json#/definitions/io.k8s.api.networking.v1.NetworkPolicyIngressRule
    ingress: []

    # https://charts.authelia.com/definitions.json#/definitions/io.k8s.api.networking.v1.NetworkPolicyEgressRule
    egress: []

  configMap:
    labels: {}
    annotations: {}
    definitions:
      network:
        devNetwork:
          # 192.168.0.0 - 192.168.7.255
          - '192.168.0.0/21'
      user_attributes: {}
        
    server:
      endpoints:
        #  A list of automatically configured authz implementations if you don't wish to manually configure each one.
        # Important Note: If you configure the 'authz' section this is completely ignored.
        automatic_authz_implementations: []
        # automatic_authz_implementations:
        # - 'AuthRequest'
        # - 'ExtAuthz'
        # - 'ForwardAuth'

        # Dictionary of individually configured Authz endpoints.
        authz: {}
        # authz:
        #   auth-request:
        #     implementation: 'AuthRequest'
        #     authn_strategies:
        #     - name: 'HeaderAuthRequestProxyAuthorization'
        #       schemes:
        #       - 'Basic'
        #     - name: 'CookieSession'
        #   ext-authz:
        #     implementation: 'ExtAuthz'
        #     authn_strategies:
        #     - name: 'HeaderProxyAuthorization'
        #       schemes:
        #       - 'Basic'
        #     - name: 'CookieSession'
        #   forward-auth:
        #     implementation: 'ForwardAuth'
        #     authn_strategies:
        #     - name: 'HeaderProxyAuthorization'
        #       schemes:
        #       - 'Basic'
        #     - name: 'CookieSession'

    telemetry:
      metrics:
        enabled: true
        serviceMonitor:
          # Enable generating a Prometheus ServiceMonitor.
          enabled: false

          # Extra annotations for the ServiceMonitor manifest.
          annotations: {}

          # Extra labels for the ServiceMonitor manifest.
          labels: {}

    # Set the default 2FA method for new users and for when a user has a preferred method configured that has been
    # disabled. This setting must be a method that is enabled.
    # Options are totp, webauthn, mobile_push.
    default_2fa_method: ''

    # Theme name to use for the frontend.
    theme: 'light'
    
    totp:
      # The issuer name displayed in the Authenticator application of your choice.
      # Defaults to 'Authelia'.
      issuer: 'Authelia'

    webauthn:
      # Enabled Passkey Logins.
      enable_passkey_login: false

      # The display name the browser should show the user for when using Webauthn to login/register.
      display_name: 'Authelia'

    identity_validation:
      # The Reset Password Identity Validation implementation ensures that users cannot perform a reset password flow
      # without first ensuring the user is adequately identified. The settings below therefore can affect the level of
      # security Authelia provides to your users so they should be carefully considered.
      reset_password:
        secret:
          secret_name: "my-authelia-secrets"
        
    authentication_backend:
      password_reset:
        # External reset password url that redirects the user to an external reset portal. This disables the internal
        # reset functionality. This should be the ltb project or similar.
        custom_url: 'https://reset.example.com'

      # Disable the password change functionality as Authelia does not manage passwords in LDAP.
      password_change:
        disable: true 

      ldap:
        # Enable LDAP Backend.
        enabled: false

        # The LDAP implementation, this affects elements like the attribute utilised for resetting a password.
        implementation: 'custom'

        # The address for the ldap server. Format: <scheme>://<address>[:<port>].
        # service-name.namespace.svc.cluster.local
        # Scheme can be ldap or ldaps in the format (port optional).
        address: 'ldaps://openldap.{{ .Release.Namespace }}.svc.cluster.local:636'

        # Use StartTLS with the LDAP connection.
        start_tls: false

        tls:
          # The server subject name to check the servers certificate against during the validation process.
          # This option is not required if the certificate has a SAN which matches the host portion of the url option.
          server_name: ''

          # Skip verifying the server certificate entirely.
          skip_verify: false

        # The base dn for every LDAP query.
        base_dn: ''

        # An additional dn to define the scope to all users.
        additional_users_dn: ''

        # The users filter used in search queries to find the user profile based on input filled in login form.
        users_filter: ''

        # An additional dn to define the scope of groups.
        additional_groups_dn: ''

        # The groups filter used in search queries to find the groups of the user.
        groups_filter: ''

        # Follow referrals returned by the server.
        # This is especially useful for environments where read-only servers exist. Only implemented for write operations.
        permit_referrals: false

        # The username of the admin user.
        user: 'admin'
        password:
          # The secret name. 
          secret_name: "my-authelia-secrets"

        attributes:
          # The attribute holding the distinguished name of the user.
          distinguished_name: ''

          # The attribute holding the username of the user. This attribute is used to populate the username in the session
          # information.
          username: ''

          # The attribute holding the display name of the user. This will be used to greet an authenticated user.
          display_name: ''

          # The attribute holding the family name of the user.
          family_name: ''

          # The attribute holding the given name of the user.
          given_name: ''

          # The attribute holding the middle name of the user.
          middle_name: ''

          # The attribute holding the nickname of the user.
          nickname: ''

          # The attribute holding the zoneinfo of the user.
          zoneinfo: ''

          # The attribute holding the locale of the user.
          locale: ''

          # The attribute holding the phone number of the user.
          phone_number: ''

          # The attribute holding the phone extension of the user.
          phone_extension: ''

          # The attribute holding the mail address of the user. If multiple email addresses are defined for a user, only the
          # first one returned by the LDAP server is used.
          mail: ''

          # The attribute which represents the objects this user is a member of.
          member_of: ''

          # The attribute holding the name of the group.
          group_name: ''

    password_policy: 
      standard:
        # Enables standard password policy.
        enabled: false

        # Require a minimum length for passwords.
        min_length: 8

        # Require a maximum length for passwords.
        max_length: 0

        # Require uppercase characters.
        require_uppercase: false

        # Require lowercase characters.
        require_lowercase: false

        # Require numeric characters.
        require_number: false

        # Require special characters.
        require_special: false

      ## zxcvbn is a well known and used password strength algorithm. It does not have tunable settings.
      zxcvbn:
        # Enables zxcvbn password policy.
        enabled: false

        # Configures the minimum score allowed.
        min_score: 0

    access_control:
      # Default policy can either be 'bypass', 'one_factor', 'two_factor' or 'deny'. It is the policy applied to any
      # resource if there is no policy to be applied to the user.
      default_policy: 'deny'

      # Access Control Rule list.
      # Rules are matched in order and the first matching rule is applied.
      # If no rules match, the default policy is applied.
      rules: []
      # rules:
      # - domain_regex: '^.*\.example.com$'
      #   policy: 'bypass'
      # - domain: 'public.example.com'
      #   policy: 'bypass'
      # - domain: '*.example.com'
      #   policy: 'bypass'
      #   methods:
      #   - 'OPTIONS'
      # - domain: 'secure.example.com'
      #   policy: 'one_factor'
      #   networks:
      #   - 'private'
      #   - 'vpn'
      #   - '192.168.1.0/24'
      #   - '10.0.0.1'
      # - domain:
      #   - 'secure.example.com'
      #   - 'private.example.com'
      #   policy: 'two_factor'
      # - domain: 'singlefactor.example.com'
      #   policy: 'one_factor'
      # - domain: 'mx2.mail.example.com'
      #   subject: 'group:admins'
      #   policy: 'deny'
      # - domain: '*.example.com'
      #   subject:
      #   - 'group:admins'
      #   - 'group:moderators'
      #   policy: 'two_factor'
      # - domain: 'dev.example.com'
      #   resources:
      #   - '^/groups/dev/.*$'
      #   subject: 'group:dev'
      #   policy: 'two_factor'
      # - domain: 'dev.example.com'
      #   resources:
      #   - '^/users/john/.*$'
      #   subject:
      #   - ['group:dev', 'user:john']
      #   - 'group:admins'
      #   policy: 'two_factor'
      # - domain: '{user}.example.com'
      #   policy: 'bypass'

    session:
      # The name of the session cookie. (default: authelia_session).
      name: 'authelia_session'

      # Sets the Cookie SameSite value. Possible options are none, lax, or strict.
      # Please read https://www.authelia.com/configuration/session/introduction/#same_site
      same_site: 'lax'

      # The time before the cookie expires and session is reset.
      expiration: '1 hour'

      # The inactivity time before the session is reset.
      inactivity: '5 minutes'

      # The remember me duration.
      remember_me: '1 month'

      encryption_key:
        # The secret name.
        secret_name: "my-authelia-secrets"

      cookies: []
      # cookies:
      # -
        ## The subdomain to prefix the domain with. For example using `domain` value `example.com` and `subdomain`
        ## `auth` should yield the URL `https://auth.example.com`. This option does not affect the cookie domain.
        # subdomain: 'auth'

        ## The domain for cookie and to build the Authelia URL.
        # domain: ''

        ## The path to suffix the domain with. For example using `domain` value `example.com` and `subdomain` value
        ## `auth` and `path` value `auth` should yield the URL `https://auth.example.com/auth`.
        ## This option does not affect the cookie domain.
        # path: ''

        ## Default Redirection URL for this domain when there is no forwarding application.
        # default_redirection_url: ''

        ## Cookie Name override for this individual cookie. Otherwise, uses the default value above where
        ## more descriptive information about this value exists.
        # name: ''

        ## Cookie Same Site value override for this individual cookie. Otherwise, uses the default value above where
        ## more descriptive information about this value exists.
        # same_site: ''

        ## Cookie Expiration value override for this individual cookie. Otherwise, uses the default value above where
        ## more descriptive information about this value exists.
        # expiration: ''

        ## Cookie Inactivity value override for this individual cookie. Otherwise, uses the default value above where
        ## more descriptive information about this value exists.
        # inactivity: ''

        ## Cookie Remember Me value override for this individual cookie. Otherwise, uses the default value above where
        ## more descriptive information about this value exists.
        # inactivity: ''

      redis: 
        # Enable the use of redis.
        enabled: false

        # Deploy the redis bitnami chart.
        deploy: false

        # The redis host or unix socket path. If utilising an IPv6 literal address it must be enclosed by square
        # brackets and quoted.
        host: 'redis.databases.svc.cluster.local'

        # The port redis is listening on.
        port: 6379

        # Optional username to be used with authentication.
        username: ''
        password:
          # (string) The secret name. 
          secret_name: "my-authelia-secrets"

        ## The Redis TLS configuration. If defined will require a TLS connection to the Redis instance(s).
        tls:
          # Enables rendering this TLS config.
          enabled: false

          # The server subject name to check the servers certificate against during the validation process.
          # This option is not required if the certificate has a SAN which matches the host option.
          server_name: ''

          # Skip verifying the server certificate entirely.
          skip_verify: false
        high_availability:
          # Enable the use of Redis Sentinel.
          enabled: false

    regulation:
      # The regulation modes to use. The active modes determines what is banned in the event of a regulation ban being
      # triggered as well as what logs to inspect to determine if a ban is needed. Default is just user, but ip is also
      # available.
      modes:
        - 'user'

      # The number of failed login attempts before user is banned. Set it to 0 to disable regulation.
      max_retries: 3

      # The time range during which the user can attempt login before being banned. The user is banned if the
      # authentication failed 'max_retries' times in a 'find_time' window. Find Time accepts duration notation.
      # See: https://www.authelia.com/configuration/prologue/common/#duration-notation-format
      find_time: '2 minutes'

      # The length of time before a banned user can login again. Ban Time accepts duration notation.
      # See: https://www.authelia.com/configuration/prologue/common/#duration-notation-format
      ban_time: '5 minutes'

    storage:
      encryption_key:
        # The secret name. 
        secret_name: "my-authelia-secrets"

      local:
        # Enable the Local Provider (Storage / SQL)
        enabled: false

    notifier:
      # You can disable the notifier startup check by setting this to true.
      disable_startup_check: false

      filesystem:
        # Enables the File System Provider (Notifier).
        enabled: false

      smtp:
        # Enables the SMTP Provider (Notifier).
        enabled: false

        # The sender is used to construct both the SMTP command MAIL FROM and to add the FROM header. This address must
        # be in RFC5322 format.
        sender: 'Authelia <admin@example.com>'

        # HELO/EHLO Identifier. Some SMTP Servers may reject the default of localhost.
        identifier: 'localhost'

        # Subject configuration of the emails sent.
        # {title} is replaced by the text from the notifier
        subject: '[Authelia] {title}'

        # This address is used during the startup check to verify the email configuration is correct.
        # It's not important what it is except if your email server only allows local delivery.
        startup_check_address: 'test@authelia.com'

        # Disables sending HTML formatted emails.
        disable_html_emails: false

        # By default we require some form of TLS. This disables this check though is not advised.
        disable_require_tls: false

        # Some SMTP servers ignore SMTP specifications and claim to support STARTTLS when they in fact do not. For
        # security reasons Authelia refuses to send messages to these servers. This option disables this measure and is
        # enabled AT YOUR OWN RISK.
        disable_starttls: false

        # The username sent for authentication with the SMTP server. Paired with the password.
        username: ''
        password:
          # The secret name. 
          secret_name: "my-authelia-secrets"

        tls:
          # The server subject name to check the servers certificate against during the validation process.
          # This option is not required if the certificate has a SAN which matches the host option.
          server_name: ''

          # Skip verifying the server certificate entirely.
          skip_verify: false

    identity_providers:
      oidc:
        # Enables this in the config map. Currently in beta stage.
        # See https://www.authelia.com/r/openid-connect/
        enabled: false

        hmac_secret:
          # The secret name.
          secret_name: "my-authelia-secrets"

        lifespans:
          # Default lifespan for Access Tokens.
          access_token: '1 hour'

          # Default lifespan for Refresh Tokens.
          refresh_token: '1 hour and 30 minutes'

          # Default lifespan for ID Tokens.
          id_token: '1 hour'

          # Default lifespan for Authorize Codes.
          authorize_code: '1 minute'

          # Default lifespan for Device Codes.
          device_code: '10 minutes'

        # Adjusts the PKCE enforcement. Options are always, public_clients_only, never.
        # For security reasons it's recommended this option is public_clients_only or always, however always is not
        # compatible with all clients.
        enforce_pkce: 'public_clients_only'

        # Enables the plain PKCE challenge which is not recommended for security reasons but may be necessary for some clients.
        enable_pkce_plain_challenge: false

        # Authorization Policies configuration.
        authorization_policies: {}
        # authorization_policies:
        #   policy_name:
        #     default_policy: 'deny'
        #     rules:
        #       - policy: 'two_factor'
        #         subject: 'user:abc'

        # The JWK's issuer option configures multiple JSON Web Keys. It's required that at least one of the JWK's
        # configured has the RS256 algorithm. For RSA keys (RS or PS) the minimum is a 2048 bit key.
        jwks: []
        # jwks:
        #   - key_id: ''
        #     algorithm: 'RS256'
        #     use: 'sig'
        #     key:
        #       value: |
        #         abc
        #         123
        #       path: '/secrets/oidc.jwk.RS256.pem'
        #     certificate_chain:
        #       path: '/secrets.oidc.jwk.RS256.crt'

        # List of registered clients for this provider.
        clients: []
        # clients:
          # -
            ## The ID is the OpenID Connect ClientID which is used to link an application to a configuration.
            # client_id: 'myapp'

            ## The description to show to users when they end up on the consent screen. Defaults to the ID above.
            # client_name: 'My Application'

            ## The client secret is a shared secret between Authelia and the consumer of this client.
            # client_secret:
              # value: '$plaintext$apple123'
              # path: '/secrets/oidc.client.myapp.value'

            ## Sector Identifiers are occasionally used to generate pairwise subject identifiers. In most cases this is not
            ## necessary. Read the documentation for more information.
            ## The subject identifier must be the host component of a URL, which is a domain name with an optional port.
            # sector_identifier_uri: 'example.com'

            ## Sets the client to public. This should typically not be set, please see the documentation for usage.
            # public: false

            ## Redirect URI's specifies a list of valid case-sensitive callbacks for this client.
            # redirect_uris:
            #   - 'https://oidc.example.com/oauth2/callback'

            ## Request URI's specifies a list of valid case-sensitive URIs this client can ask Authelia to obtain a
            ## Request Object from.
            # request_uris:
            #   - 'https://oidc.example.com/oauth2/request-object/authelia.jwk'

            ## Audience this client is allowed to request.
            # audience: []

            ## Scopes this client is allowed to request.
            # scopes:
            #   - 'openid'
            #   - 'profile'
            #   - 'email'
            #   - 'groups'

            ## Grant Types configures which grants this client can obtain.
            ## It's not recommended to configure this unless you know what you're doing.
            # grant_types:
            #   - 'refresh_token'
            #   - 'authorization_code'

            ## Response Types configures which responses this client can be sent.
            ## It's not recommended to configure this unless you know what you're doing.
            # response_types:
            #   - 'code'

            ## Response Modes configures which response modes this client supports.
            ## It's not recommended to configure this unless you know what you're doing.
            # response_modes:
            #   - 'form_post'
            #   - 'query'
            #   - 'fragment'

            ## The policy to require for this client; one_factor or two_factor.
            # authorization_policy: 'two_factor'

            # lifespan: ''

            # claims_policy: ''

            # requested_audience_mode: ''

            ## The consent mode controls how consent is obtained.
            # consent_mode: 'auto'

            ## This value controls the duration a consent on this client remains remembered when the consent mode is
            ## configured as 'auto' or 'pre-configured'.
            # pre_configured_consent_duration: '30 days'

            # require_pushed_authorization_requests: false
            # require_pkce: false
            # pkce_challenge_method: 'S256'

  secret:
    # Name of an existing Secret manifest to mount instead of generating one.
    existingSecret: ''

    # Extra annotations for the Secret manifest.
    annotations: {}

    # Extra labels for the Secret manifest.
    labels: {}

    ## additionalSecrets contains a list of additional secrets to mount.
    ## They will all be mounted in the format of '/{mountPath}/{key}' where the '{mountPath}' is the value above and
    ## '{key}' is the key from the dictionary below (in our example we named it 'example'). If the items are specified
    ## then those options will be rendered in the volumes spec. See 'example-without-items' for an example that doesn't
    ## specify this.

    # Additional secrets to mount to the Pod.
    additionalSecrets:
      # The secret manifest containing the Authelia secrets.
      my-authelia-secrets: {}
      authelia-tls: {}

  certificates:
    # Name of an existing Secret manifest to mount which contains trusted certificates.
    existingSecret: authelia-tls

    # Extra annotations for the Certificates Secret manifest.
    annotations: {}

    # Extra labels for the Certificates Secret manifest.
    labels: {}

  persistence:
    # Enable the PersistentVolumeClaim features for Authelia.
    enabled: true

    # Extra annotations for the PersistentVolumeClaim related manifests.
    annotations: {}

    # Extra annotations for the PersistentVolumeClaim related manifests.
    labels: {}

    # Uses the specified storageClass for the PersistentVolumeClaim.
    storageClass: ''

    selector: {}

  # Configure redis database subchart under this key.
  # This will be deployed when session.redis.deploy is set to true
  # Currently settings need to be manually copied from here to the session.redis section
  # For more options and to see the @default please see [redis chart documentation](https://github.com/bitnami/charts/tree/main/bitnami/redis)
  # @default `{}`
  redis:
    architecture: 'standalone'
    auth:
      enabled: false
      sentinel: true
      existingSecret: my-authelia-secrets
      existingSecretPasswordKey: redis.password

    master:
      resources: {}
      priorityClassName: ''
      persistence:
        enabled: false
        storageClass: ''
        accessModes:
          - 'ReadWriteOnce'
        size: '1Gi'

    replica:
      replicaCount: 3
      resources: {}
      priorityClassName: ''
      persistence:
        enabled: false
        storageClass: ''
        accessModes:
          - 'ReadWriteOnce'
        size: '1Gi'

